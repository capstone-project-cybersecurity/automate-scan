pipeline {

    agent any

    //triggers {
    //    cron('*/5 * * * *')
    //}

    environment {
        OUTPUT_FILE = "output.txt"
        GITHUB_URL = "https://github.com/capstone-project-cybersecurity/automate-scan.git"
        REPOSITORY = "automate-scan"
    }

    stages {

        stage('Cleaning workspace') {

            steps {
                sh "rm -rf ${OUTPUT_FILE}"
            }
        }

        stage('Running scan') {

            options {
                timeout(time: 10, unit: 'MINUTES')
            }

            steps {
                git "${GITHUB_URL}"
                script {
                try {
                    sh "docker build -t ${REPOSITORY} ."
                    sh "docker run ${REPOSITORY} | tee ${OUTPUT_FILE}"
                } catch (Exception e) {
                    echo "Build failed: ${e}"
                    }
                }
            }
        }
    }
            post {
                success {
                    script {
                    sh 'echo "Has succeeded"'
                        def workspaceUrl = "${BUILD_URL}ws"
                        slackSend (
                        color: '#36a64f',
                        message: "Build ${env.JOB_NAME} ${env.BUILD_NUMBER} has: ${currentBuild.currentResult}! - You can review the JOB URL: ${env.BUILD_URL}console - also review the workspace URL: ${workspaceUrl}",
                        channel: '#jenkins-pentesting-jobs',
                    )
                    }
                }
                failure {
                    sh 'echo "Has failed"'
                          slackSend (
                          color: '#d00000',
                          message: "Build ${env.JOB_NAME} ${env.BUILD_NUMBER} has: ${currentBuild.currentResult}! - You can review the JOB URL: ${env.BUILD_URL}console",
                          channel: '#jenkins-pentesting-jobs',
                    )
                }
            }
}